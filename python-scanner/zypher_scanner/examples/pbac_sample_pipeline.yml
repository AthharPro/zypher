name: CI/CD Pipeline with PBAC Issues

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Missing top-level permissions definition

env:
  DOCKER_REGISTRY: my-registry.example.com
  DOCKER_TAG: latest
  AWS_REGION: us-east-1
  CLUSTER_NAME: production-cluster

jobs:
  # Job that mixes build and deployment operations in same job
  build-and-deploy:
    runs-on: ubuntu-latest
    # Missing job-level permissions
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16'
      
      - name: Install dependencies and build
        run: |
          npm ci
          npm run build
          npm run test
      
      # Directly pushing to registry in same job as build
      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.DOCKER_REGISTRY }}/myapp:${{ env.DOCKER_TAG }} .
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ env.DOCKER_REGISTRY }}/myapp:${{ env.DOCKER_TAG }}
      
      # Sensitive AWS operations without proper access controls
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          # Missing role-to-assume or OIDC token audience restrictions
      
      # Deploying to prod without separation from build job
      - name: Deploy to Production
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

  # Infrastructure operations with excess permissions
  update-infrastructure:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    # Write-all is too permissive for infrastructure operations
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          # Missing role assumption or OIDC settings
      
      # Directly applying infrastructure changes without approval
      - name: Apply Terraform Changes
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve
          # Sensitive command executed without manual approval

  # Database migrations with no restrictions
  database-migrations:
    runs-on: ubuntu-latest
    # Missing dependency on previous jobs
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Direct access to production database without controls
      - name: Run Database Migrations
        run: |
          export DB_HOST=${{ secrets.PROD_DB_HOST }}
          export DB_USER=${{ secrets.PROD_DB_USER }}
          export DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          # Running migrations directly on production without approval
          npm run migrations:run
      
      # Notifying on completion, even if workflow fails earlier
      - name: Notify on completion
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Database migrations completed!'
            })
